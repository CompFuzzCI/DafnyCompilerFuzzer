name: Fuzz
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit ID of to lauch fuzzing'
        required: true
        type: string
      main_commit:
        description: 'Commit ID of the main branch'
        required: true
        type: string
      branch:
        description: 'Branch to fuzz'
        required: true
        type: string
      duration:
        description: 'Duration of fuzzing in seconds'
        required: true
        type: number
      instance:
        description: 'Number of instances to run fuzzing (in multiple of 10)'
        required: true
        type: number
permissions:
  id-token: write
  contents: read
jobs:
  CheckImage:
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check-image.outputs.image-exists }}
    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Check Image
        id: check-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: compfuzzci
          REPOSITORY: compfuzzci-dafny
          COMMIT: ${{github.event.inputs.commit}}
        run: |
          image_exists=false
          IMAGE_META="$( aws ecr-public describe-images --repository-name $REPOSITORY --image-ids=imageTag=$COMMIT --query 'imageDetails[].imageTags' --output text --region us-east-1 || true)"
          if [[ $IMAGE_META == $COMMIT ]]; then
            echo "Image exists"
            echo "image-exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "image-exists=false" >> "$GITHUB_OUTPUT"
          fi
  BuildImage:
    runs-on: ubuntu-latest
    needs: CheckImage
    if: needs.CheckImage.outputs.image-exists == 'false'
    outputs:
      build-successful: ${{ steps.build-push.outputs.build-successful }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: compfuzzci
          REPOSITORY: compfuzzci-dafny
          IMAGE: ${{github.event.inputs.commit}}
          COMMIT: ${{github.event.inputs.commit}}
        run: |
          max_attempts=5
          attempt=0
          success=false
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Attempt $attempt of $max_attempts"
            
            docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE -f Docker/dafny.Dockerfile --build-arg COMMIT=$COMMIT . && \
            docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE
            
            if [ $? -eq 0 ]; then
              success=true
              break
            else
              echo "Attempt $attempt failed. Retrying..."
            fi
          done
          
          if [ $success = true ]; then
            echo "Build and push successful after $attempt attempts."
            echo "build-successful=true" >> "$GITHUB_OUTPUT"
          else
            echo "Build and push failed after $attempt attempts."
            echo "build-successful=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
  FuzzNewImage:
    runs-on: ubuntu-latest
    needs: BuildImage
    if: needs.BuildImage.outputs.build-successful == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Render ECS Task Definition
        id: render-task-def
        uses: kbuaaaaaa/amazon-ecs-render-task-definition@v1
        with:
          task-definition: fuzzing_task_definition.json
          container-name: fuzzing-container
          image: ${{ steps.login-ecr.outputs.registry }}/compfuzzci/compfuzzci-dafny:${{github.event.inputs.commit}}
          environment-variables: GITHUB_TOKEN=${{ secrets.COMPFUZZCI_PAT }}
          execution-role-arn: ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}
          task-role-arn: ${{ secrets.ECS_TASK_ROLE_ARN }}
          command: fuzz ${{github.event.inputs.main_commit}} ${{github.event.inputs.duration}} ${{github.event.inputs.branch}}
      - name: Register Amazon ECS task definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      - name: Deploy ECS Task
        run: |
          aws ecs run-task --cluster ${{ secrets.ECS_CLUSTER }} --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} --count 10
  FuzzExistingImage:
    runs-on: ubuntu-latest
    needs: CheckImage
    if: needs.CheckImage.outputs.image-exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Render ECS Task Definition
        id: render-task-def
        uses: kbuaaaaaa/amazon-ecs-render-task-definition@v1
        with:
          task-definition: fuzzing_task_definition.json
          container-name: fuzzing-container
          image: ${{ steps.login-ecr.outputs.registry }}/compfuzzci/compfuzzci-dafny:${{github.event.inputs.commit}}
          environment-variables: GITHUB_TOKEN=${{ secrets.COMPFUZZCI_PAT }}
          execution-role-arn: ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}
          task-role-arn: ${{ secrets.ECS_TASK_ROLE_ARN }}
          command: fuzz ${{github.event.inputs.main_commit}} ${{github.event.inputs.duration}} ${{github.event.inputs.branch}}
      - name: Register Amazon ECS task definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      - name: Deploy ECS Task
        run: |
          aws ecs run-task --cluster ${{ secrets.ECS_CLUSTER }} --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} --count 10
    