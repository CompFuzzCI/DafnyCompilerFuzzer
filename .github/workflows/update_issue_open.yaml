name: Update Issue Open

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to update'
        required: true
        type: number
      issuer:
        description: 'User who opened the issue'
        required: true
        type: string
      commit:
        description: 'Latest commit ID'
        required: true
        type: string
permissions:
  id-token: write
  contents: read
jobs:
  BuildImage:
    runs-on: ubuntu-latest
    outputs:
      build-successful: ${{ steps.build-push.outputs.build-successful }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Authenticate with AWS
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{secrets.AWS_REGION}}
      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     registry-type: public
      # - name: Build, tag, and push docker image to Amazon ECR
      #   id: build-push
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REGISTRY_ALIAS: compfuzzci
      #     REPOSITORY: compfuzzci-dafny
      #     IMAGE: dafny-lang-master
      #     AUTHOR: dafny-lang
      #     BRANCH: master
      #   run: |
      #     max_attempts=5
      #     attempt=0
      #     success=false
      #     while [ $attempt -lt $max_attempts ]; do
      #       attempt=$((attempt + 1))
      #       echo "Attempt $attempt of $max_attempts"
            
      #       docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE \
      #         -f Docker/dafny.Dockerfile \
      #         --build-arg AUTHOR=$AUTHOR \
      #         --build-arg BRANCH=$BRANCH . && \
      #       docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE
            
      #       if [ $? -eq 0 ]; then
      #         success=true
      #         break
      #       else
      #         echo "Attempt $attempt failed. Retrying..."
      #       fi
      #     done
          
      #     if [ $success = true ]; then
      #       echo "Build and push successful after $attempt attempts."
      #       echo "build-successful=true" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "Build and push failed after $attempt attempts."
      #       echo "build-successful=false" >> "$GITHUB_OUTPUT"
      #       exit 1
      #     fi
  # ProcessBug:
    runs-on: ubuntu-latest
    needs: BuildImage
    if: needs.BuildImage.outputs.build-successful == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Render ECS Task Definition
        id: render-task-def
        uses: kbuaaaaaa/amazon-ecs-render-task-definition@v1
        with:
          task-definition: processing_task_definition.json
          container-name: processing-container
          image: ${{ steps.login-ecr.outputs.registry }}/compfuzzci/compfuzzci-dafny:dafny-lang-master
          environment-variables: GITHUB_TOKEN=${{ secrets.COMPFUZZCI_PAT }}
          execution-role-arn: ${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}
          task-role-arn: ${{ secrets.ECS_TASK_ROLE_ARN }}
          command: process ${{github.event.inputs.issue_number}}
      - name: Register Amazon ECS task definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
      - name: Deploy ECS Task
        run: |
          aws ecs run-task --cluster ${{ secrets.ECS_CLUSTER }} --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} --count 1